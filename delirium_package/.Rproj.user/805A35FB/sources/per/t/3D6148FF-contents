---
title: "FrailtyPenalized_Function_Outline"
author: "Lacey Etzkorn"
date: "12/11/2019"
output:
  html_document:
    toc: true
    numbered_sections: true
    toc_depth: 3
---

```{r, include = FALSE}
library(survival);library(tidyverse)
```

Notes on the `frailtyPenal` function in `frailtypack`.

## Data Simulation

```{r data_simulation}
library(tidyverse)
library(frailtypack)
data(dataMultiv)
data <- dataMultiv 
colnames(data) <- tolower(colnames(data))
data.Event2 <- data %>%
	filter(indicrec != 1) %>%
	group_by(patient) %>%
	mutate(time0 = c(0,time1[-n()]),
	       timegap = time1 - time0, 
	       discharge = 1-indicdeath-indicmeta) %>%
	dplyr::select(-indicrec, -obs)
data <- data %>%
	filter(indicmeta != 1) %>%
	group_by(patient) %>%
	mutate(time0 = c(0,time1[-n()]),
	       timegap = time1 - time0, 
	       discharge = 1-indicdeath-indicrec) %>%
	dplyr::select(-indicmeta, -obs)
head(data)
```

## Function Arguments and Call

```{r}
my_function_call <- 
as.call(list(
formula = Surv(time0, time1,indicrec) ~ cluster(patient)+v1+v2+
	event2(indicmeta)+terminal(indicdeath)+terminal2(discharge),
formula.Event2=~v1+v2+v3 + cluster(patient), 
formula.terminalEvent=~v1,
formula.terminalEvent2=~1,
data=dataMultiv,
hazard = "Weibull",
initialize=FALSE,
recurrentAG = F
))

formula = Surv(time0, time1, indicrec) ~ cluster(patient)+v1+v2+terminal(indicdeath)+terminal2(discharge)
formula.Event2 = Surv(time0, time1,indicmeta) ~ v1+v2+v3 + cluster(patient)
formula.terminalEvent=~v1
formula.terminalEvent2=~1
data=data
data.Event2 = data.Event2
hazard = "Weibull"
initialize=FALSE
recurrentAG = F
maxit = 350
print.times = TRUE
```

```{r}
    # Ajout de la fonction minmin issue de print.survfit, permettant de calculer la mediane
    minmin <- function(y, x) {
      tolerance <- .Machine$double.eps^.5   #same as used in all.equal()
      keep <- (!is.na(y) & y <(.5 + tolerance))
      if (!any(keep)) NA
      else {
        x <- x[keep]
        y <- y[keep]
        if (abs(y[1]-.5) <tolerance  && any(y< y[1])) 
          (x[1] + x[min(which(y<y[1]))])/2
        else x[1]
      }
    }
```

NN = data frame of outcomes from

Body of function

Function outline

1. Get names of special variables



```{r}
# LE: moved here from later in code
if(class(formula)!="formula") stop("The argument formula must be a formula")

if (NROW(data) == 0)stop("No (non-missing) observations") 

############################ Verify Event 1 / Times
# NN =  names of time gap and recurrent event 1
Y1 <- get_all_vars(update(formula,"~1"),data)

if(ncol(Y1) != 3){
	stop("Survival object outcome must be specified using \n
	     time when at risk period starts and stops, such as: \n
	     Surv(time.start, time.stop, event.indicator).
	     This is true for both calendar time (AG) and gap time
	     formulations.")
}

NN <- colnames(Y1)

EVENT1 <- NN[3]
TSTART <- NN[1]
TSTOP <- NN[2]

event1 <- Y1[,3]
tt10 <- Y1[,1]
tt11 <- Y1[,2]


#if (type != "right" && type != "counting"){ 
#      stop(paste("Cox model doesn't support \"", type, "\" survival data", sep = ""))
#}

############################ Verify recurrent event 2    
  # LE: name of recurrent event 2

if(!missing(formula.Event2)){
	Y2 <- get_all_vars(update(formula.Event2,"~1"),data.Event2)

	if(ncol(Y2) != 3){
	stop("Survival object outcome must be specified using \n
	     time when at risk period starts and stops, such as: \n
	     Surv(time.start, time.stop, event.indicator).
	     This is true for both calendar time (AG) and gap time
	     formulations.")
	}
	NN <- colnames(Y2)
	EVENT2 <- NN[3]
	TSTART2 <- NN[1]
	TSTOP2 <- NN[2]

	event2 <- Y2[,3]
	tt20 <- Y2[,1]
	tt21 <- Y2[,2]
	
	if (!all(event2%in%c(1,0))){ 
     	  stop("event2 must contain a variable coded 0-1 and a non-factor variable")
	}
	event2.ind <- 1
}else{
	event2.ind <- 0
    	event2 <- 0
    	tt20 <- 0
	tt21 <- 0
}
    
############################ Verify Terminal Event 1   
  # LE: name of terminal event 1
    TT <- untangle.specials(terms(formula, c("terminal")), "terminal", 1:10)$vars 
    start <- grep("\\(",unlist(strsplit(TT,"")))
    stop <- grep("\\)",unlist(strsplit(TT,"")))
    TERMINAL1 <- substr(TT,start=start+1,stop=stop-1)
    if(length(TERMINAL1)==0){
    	stop("A term for a terminal event must be included in the formula.")
    }
    if (!all(data[[TERMINAL1]]%in%c(1,0))){ 
     	  stop("terminal must contain a variable coded 0-1 and a non-factor variable")
    }

############################ Verify Terminal Event 2
    TT <- untangle.specials(terms(formula, c("terminal2")), "terminal2", 1:10)$vars 
    start <- grep("\\(",unlist(strsplit(TT,"")))
    stop <- grep("\\)",unlist(strsplit(TT,"")))
    TERMINAL2 <- substr(TT,start=start+1,stop=stop-1)
    if(length(TERMINAL2)==0){
    	terminal2.ind <- 0
    }else{
    	if (!all(data[[TERMINAL2]]%in%c(1,0))){ 
     	  stop("terminal must contain a variable coded 0-1 and a non-factor variable")
    	}
    	terminal2.ind <- 1
    }
    
################################ Verify Cluster Variable    
  # name of cluster variable
    TT <- untangle.specials(terms(formula, c("cluster")), "cluster", 1:10)$vars 
    start <- grep("\\(",unlist(strsplit(TT,"")))
    stop <- grep("\\)",unlist(strsplit(TT,"")))
    CLUSTER <- substr(TT,start=start+1,stop=stop-1)
    
if (length(data[[CLUSTER]])){
      uni.cluster<-unique(data[[CLUSTER]])
    }else{
      stop("grouping variable is needed")   
}
if(length(uni.cluster)==1){ 
      stop("grouping variable must have more than 1 level")   
}
if(event2.ind==1 & !CLUSTER %in% colnames(data.Event2)){
	stop("grouping variable must be present in data.Event2")
}
if(!all(uni.cluster %in% data.Event2[[CLUSTER]])){
	stop("all groups must be represented in data.Event2")
}

##########################################################################
# Hazard specification

    haztemp <- hazard
    hazard <- unlist(strsplit(hazard,split="-"))
if(!(length(hazard) %in% c(1,2))){stop("Please check and revise the hazard argument according to the format specified in the help.")}
    
# typeof is the numerical indicator for hazard
if(length(hazard)==1){
      if(!(hazard %in% c("Weibull","Splines"))){
        stop("Only 'Weibull' or 'Splines' hazard can be specified in hazard argument.")
      }
      typeof <- switch(hazard,"Splines"=0,"Weibull"=2)
        
      if (typeof == 0){ ### Splines (equidistant par defaut)
          if (!missing(nb.int)){
            stop("When the hazard function equals 'Splines' or 'Weibull', 
                 'nb.int' argument must be deleted.")
          }
          # LE: created vector instead, added 4th element for second terminal events
          size <- c(100, 100, 100, 100)
          equidistant <- 1
          nbinterv <- c(0,0,0,0)
      }else if (typeof == 2){ ### Weibull
          if (!missing(nb.int)){
            warning("When the hazard function equals 'Splines' or 'Weibull', 
                    'nb.int' argument is ignored.")
          }
          size <- c(100, 100, 100, 100)
          equidistant <- 2
          nbinterv <- c(0,0,0,0)
      }
    }else{ # length hazard > 1
      if(all(!"Splines" %in% hazard)){
        stop("Only 'Splines' and 'Piecewise' hazard can be specified 
             in hazard argument in this case")
      }
      ### Splines percentile
      if ("Splines" %in% hazard){
        typeof <- 0
        if(!(all(hazard %in% c("Splines","per")))){
          stop ("The hazard argument is incorrectly specified. 
                Only 'per' is allowed with 'Splines'. 
                Please refer to the help file of frailtypack.")
        }else{
          size <- c(100, 100, 100, 100)
          equidistant <- 0
          nbinterv <- c(0,0,0,0)
        }
      }
    }# end of if(length(hazard)==1) else
    
    
#### Configure Splines Hazard (knots)
if(typeof == 0){
      crossVal<-1 # always do cross validation for splines
      if(missing(kappa))stop("smoothing parameter (kappa1) is required")
      if(missing(n.knots)) stop("number of knots are required")
      if(class(kappa)!="numeric")stop("The argument kappa must be a numeric")
      if(class(n.knots)!="integer")stop("The argument n.knots must be an integer")
      if (length(n.knots)!= 2 + event2.ind + terminal2.ind){
      	stop("length of knots must be equal to the number of formulas 
      	     for different event types (3 or 4) in the order
      	     recurrent1, recurrent2, terminal1, terminal2.")
      }
      if(length(kappa)!= 2 + event2.ind + terminal2.ind){
      	stop("length of knots must be equal to the number of formulas 
      	     for different event types (3 or 4) in the order
      	     recurrent1, recurrent2, terminal1, terminal2.")
      }
      if(event2.ind == 1 & terminal2.ind == 0){
      	n.knots = c(n.knots, 0)
      	kappa = c(kappa0,0)
      }
      if(event2.ind == 0 & terminal2.ind == 1){
      	n.knots = c(n.knots[1], 0, n.knots[2:3])
      	kappa = c(kappa[1], 0, kappa[2:3])
      }
      n.knots[n.knots<4 & n.knots!=0] <- 4
      n.knots[n.knots>20] <- 20
}else{ # if the hazard is not splines
      if (!(missing(n.knots)) || !(missing(kappa))){
        warning("When parametric hazard is not 'Splines' 
                function is specified, 'kappa' and 'n.knots' 
                arguments are ignored.")
      }
      n.knots <- rep(0,4)
      kappa <- rep(0,4)
      crossVal <- 0
}
   
########################### End Hazard Configuration

    flush.console()
    if(print.times){
      ptm<-proc.time()
      cat("\n")
      cat("Be patient. The program is computing ... \n")
    }
    
######################################################################### 
# Configure Model Matricies    

# Recurrent1
specials = c("strata", "cluster", "terminal","event2","terminal2")
Terms = terms(formula, specials = specials)
modelmatrix1 = 
model.matrix(
update(
drop.terms(termobj = terms(formula), unlist(attr(Terms, "specials")) - 1,
           keep.response=TRUE),
~.-1),
data) # need to delete specials from the formula

group1 <- data[[CLUSTER]]
# Compute Event Counts
nevents1 <- tapply(event1, group1, sum)

# Recurrent 2
if(event2.ind==1){
	group2 <- data.Event2[[CLUSTER]]
	# Compute Event Counts
	nevents2 <- tapply(event2, group2, sum)
	Terms2 = terms(formula.Event2, specials = specials)
	if(!is.null(unlist(attr(Terms2, "specials")))){
		modelmatrix2 = 
		model.matrix(
		update(
	    	drop.terms(termobj = terms(formula.Event2), unlist(attr(Terms2, "specials")) - 1,
                	keep.response=TRUE),
	    	~.-1),
		data.Event2) 
	}else{
		modelmatrix2 = 
		model.matrix(update(formula.Event2, ~.-1), data.Event2)
	}
}else{
	modelmatrix2 = matrix(0)
}

# Terminal 1
data.terminal <- do.call(what = "rbind", 
		 lapply(split(x = data, f = data[[CLUSTER]]),
	    		function(df){
	    			subset(df, df[[TSTOP]] == max(df[[TSTOP]]) )
	    		})
		 )
groupdc <- data.terminal[[CLUSTER]]
tt1dc <- data.terminal[[TSTOP]]
terminal1 <- data.terminal[[TERMINAL1]]

modelmatrix3 = model.matrix(update(formula.terminalEvent, ~.-1), data.terminal)

# Terminal 2
if(terminal2.ind==1){
	terminal2 <- data.terminal[[TERMINAL2]]
	modelmatrix4 = model.matrix(update(formula.terminalEvent2, ~.-1), data.terminal)
}else{
	terminal2 <- data.terminal[[TERMINAL2]]
	modelmatrix4 = matrix(0)
}

############################################################
# Compute Gap Times (If Applicable)

if (!recurrentAG){
      tt11 <- tt11 - tt10    
      tt10 <- 0*tt10
      tt21 <- tt21 - tt20
      tt20 <- 0*tt20
}

#########################################################################
# Configure Parameters

### Total number of parameters
nvar = ncol(modelmatrix1) + 
	ncol(modelmatrix2)*event2.ind + 
	ncol(modelmatrix3) + 
	ncol(modelmatrix4)*terminal2.ind

# indexes indicating where parameters will be located in the parameter vector
effet <- 1
indic_alpha <- 4
indic_eta  <- 3	
indic_rho <- 0
indic_a1 <- 1
indic_a2 <- 2

np <- switch(as.character(typeof),
             "0"=(sum(n.knots) + 6 + nvar + effet + indic_alpha), # splines
             "2"=(2*(2 + event2.ind + terminal2.ind) + nvar + effet + indic_alpha)) # weibull

######################################################################
# Fortran Code
ans <- .Fortran(C_joint_multiv_2term,
                nrow1 = as.integer(nrow(data)),
	    nrow2 = as.integer(nrow(data.Event2)),
	    nrowdc = as.integer(nrow(data.terminal)),
                ngroup = as.integer(length(unique(data[[CLUSTER]]))),
	    group1 = group1, 
	    group2 = group2, 
	    groupdc = groupdc, 
                tt10 = tt10,
    	    tt11 = tt11,
	    tt20 = tt20,
    	    tt21 = tt21,
    	    tt1dc = tt1dc,
	    event2ind=event2.ind,
	    terminal2ind=terminal2.ind,
	    event1 = event1,
	    event2 = event2,
	    nevents1 = nevents1,
	    nevents2 = nevents2,
	    terminal1 = terminal1,
	    terminal2 = terminal2,
	    nvar1 = ncol(modelmatrix1),
	    nvar2 = ncol(modelmatrix2),
	    nvar3 = ncol(modelmatrix3),
	    nvar4 = ncol(modelmatrix4),
	    modelmatrix1 = modelmatrix1, 
	    modelmatrix2 = modelmatrix2, 
	    modelmatrix3 = modelmatrix3, 
	    modelmatrix4 = modelmatrix4,
	    np = np,
    	    nknots = n.knots,
	    k0 = as.numeric(kappa),
	    maxIteration = round(maxit),
	    initialize = as.integer(initialize),
	    equidistant = equidistant,
	    crossVal = crossVal,
	    recurrentAG = as.integer(recurrentAG),
	    typeof = as.integer(typeof),
	    indic_alpha = as.integer(indic_alpha),
	    
	    b=as.double(rep(0,np)),
	    H=as.double(matrix(0,nrow=np,ncol=np)),
	    HIH=as.double(matrix(0,nrow=np,ncol=np)),
                loglik=as.double(0),
                #LCV=as.double(rep(0,2)),
                #critCV=as.integer(rep(0,5))
	    )

# x1=as.double(rep(0,size1)),
# 
# lam=as.double(matrix(0,nrow=size1,ncol=3)),
# xSu1=as.double(xSu1),
# surv=as.double(matrix(0,nrow=mt11,ncol=3)),
# x2=as.double(rep(0,size2)),
# lam2=as.double(matrix(0,nrow=size2,ncol=3)),
# xSu2=as.double(xSu2),
# surv2=as.double(matrix(0,nrow=mt12,ncol=3)),
# x3=as.double(rep(0,size3)),
# lam3=as.double(matrix(0,nrow=size3,ncol=3)),
# xSu3=as.double(xSu3),
# 
# surv3=as.double(matrix(0,nrow=mt13,ncol=3)),
# as.integer(typeof),
# as.integer(equidistant),
# as.integer(nbIntervEvent),
# as.integer(mtEvent),
# ni=as.integer(0),
# cptEvent=as.integer(rep(0,3)),
# shape.weib=as.double(rep(0,3)),
# scale.weib=as.double(rep(0,3)),
# as.integer(mt1Event),
# 
# ResMartingaleEvent=as.double(ResMartingaleEvent),
# frailtyEstimates=as.double(frailtyEstimates),
# linear.pred=as.double(rep(0,n)),
# lineardc.pred=as.double(rep(0,ng)),
# linear2.pred=as.double(rep(0,n2)),
# zi=as.double(zi),
# zidc=as.double(zidc),
# zi2=as.double(zi2),
# 
# time=as.double(time),
# timedc=as.double(timedc),
# time2=as.double(time2)

######################################################################
# Post Processing

if (ans$critCV[2] == 4){
      warning("Problem in the loglikelihood computation. The program stopped abnormally. Please verify your dataset. \n")
}else if (ans$critCV[2] == 2){
      warning("Model did not converge. Change the 'maxit' parameter")
}else if (ans$critCV[2] == 3){
      warning("Matrix non-positive definite.")
}

    if (all(noVar==1)) nvar<-0


fit <- ans[c("np", "b")]
fit$na.action <- attr(m, "na.action")
fit$call <- call
fit$n <- n
fit$groups <- ng
fit$n.events <- ans$cptEvent[1]
fit$n.deaths <- ans$cptEvent[2]
fit$n.events2 <- ans$cptEvent[3]
fit$AG <- recurrentAG
fit$LCV <- ans$LCV[1]
fit$AIC <- ans$LCV[2]
fit$theta1 <- ans$b[np - nvar - indic_alpha]^2
fit$theta2 <- ans$b[np - nvar - indic_eta]^2
fit$alpha1 <- ans$b[np - nvar - indic_a1]
fit$alpha2 <- ans$b[np - nvar - indic_a2]
fit$rho <- 2*exp(ans$b[np - nvar - indic_rho])/(exp(ans$b[np - nvar - indic_rho])+1) - 1
fit$npar <- np
fit$noVar <- c(total = nvar, 
	   recurrent1 = nvar1, recurrent2 = nvar2,
	   terminal1 = nvar3, terminal4 = nvar4)
fit$nbintervR <- nbintervR
fit$nbintervDC <- nbintervDC
fit$nbintervR2 <- nbintervR2
fit$istop <- ans$critCV[2]
fit$indic.nb.int1 <- indic.nb.int1
fit$indic.nb.int2 <- indic.nb.int2
fit$indic.nb.int3 <- indic.nb.int3
fit$shape.weib <- ans$shape.weib
fit$scale.weib <- ans$scale.weib

ResMartingaleEvent <- matrix(ans$ResMartingaleEvent,nrow=ng,ncol=3)
frailtyEstimates <- matrix(ans$frailtyEstimates,nrow=ng,ncol=5)
fit$martingale.res <- ResMartingaleEvent[,1]
fit$martingaledeath.res <- ResMartingaleEvent[,2]
fit$martingale2.res <- ResMartingaleEvent[,3]
fit$frailty.pred <- frailtyEstimates[,1]
fit$frailty2.pred <- frailtyEstimates[,2]
fit$frailty.var <- frailtyEstimates[,3]
fit$frailty2.var <- frailtyEstimates[,4]
fit$frailty.corr <- frailtyEstimates[,5]
fit$linear.pred <- ans$linear.pred
fit$lineardeath.pred <- ans$lineardc.pred
fit$linear2.pred <- ans$linear2.pred

if(typeof==0){
      fit$logLikPenal <- ans$loglik
    }else{
      fit$logLik <- ans$loglik
      fit$n.knots<-n.knots
      fit$kappa <- ans$k0
      fit$n.knots.temp <- n.knots.temp
      fit$zi <- ans$zi
}else if(typeof == 1){
      fit$time <- ans$time
      fit$timedc <- ans$timedc
      fit$time2 <- ans$time2
}

############################ Configure Fitted Coefficients
Names <- NULL 
if(nvar1!=1) Names <- c(Names,colnames(modelmatrix1))
if(nvar2!=1) Names <- c(Names,colnames(modelmatrix2))
if(nvar3!=1) Names <- c(Names,colnames(modelmatrix3))
if(nvar4!=1) Names <- c(Names,colnames(modelmatrix4))
    
coef <- NULL
if (all(noVar==1)){
     fit$coef <- NULL
}else{	
      if(nvar1!=1) coef <- c(coef,ans$b[(np - nvar + 1):(np - nvar + nvarRec)])
      if(nvar2!=1) coef <- c(coef,ans$b[(np - nvar + nvarRec + 1):(np - nvar + nvarRec + nvarEnd)])
      if(nvar3!=1) coef <- c(coef,ans$b[(np - nvar + nvarRec + nvarEnd + 1):np])
      if(nvar4!=1) # needs work
      fit$coef <- coef
      names(fit$coef) <- Names
}

############################## Hypothesis Tests (THIS SECTION NEEDS WORK)
# Reccurrent1
    Beta <- ans$b[(np - nvar + 1):np]
    VarBeta <- fit$varH
    if(length(vec.factor) > 0){
      nfactor <- length(vec.factor)
      p.wald <- rep(0,nfactor)
      if(fit$istop == 1){
      	fit$global_chisq <- waldtest(N=nvar1,
      			   nfact=nfactor,
      			   place=ind.place,
      			   modality=occur,
      			   b=Beta,
      			   Varb=VarBeta,
      			   Llast=nvarEnd,
      			   Ntot=ntot)
      }else fit$global_chisq <- 0
      
      fit$dof_chisq <- occur
      fit$global_chisq.test <- 1
      # Calcul de pvalue globale
      for(i in 1:length(vec.factor)){
        p.wald[i] <- signif(1 - pchisq(fit$global_chisq[i], occur[i]), 3)
      }
      fit$p.global_chisq <- p.wald
      fit$names.factor <- vec.factor
      
    }else{
      fit$global_chisq.test <- 0
    }
    
# Terminal 1
    if (!missing(formula.terminalEvent)){
      if(length(vec.factordc) > 0){
        nfactor <- length(vec.factordc)
        p.walddc <- rep(0,nfactor)
        
        if(fit$istop == 1){
        	fit$global_chisq_d <- waldtest(N=nvarEnd,
        			       nfact=nfactor,
        			       place=ind.placedc,
        			       modality=occurdc,
        			       b=Beta,
        			       Varb=VarBeta,
        			       Lfirts=nvarRec,
        			       Ntot=ntot)
        }else fit$global_chisq_d <- 0 
        
        fit$dof_chisq_d <- occurdc
        fit$global_chisq.test_d <- 1
        # Calcul de pvalue globale
        for(i in 1:length(vec.factordc)){
          p.walddc[i] <- signif(1 - pchisq(fit$global_chisq_d[i], occurdc[i]), 3)
        }
        fit$p.global_chisq_d <- p.walddc
        fit$names.factordc <- vec.factordc
      }else{
        fit$global_chisq.test_d <- 0
      }
    }else{
      fit$global_chisq.test_d <- 0
    }
    
# Recurrent 2
    ntmp <- nvarRec+nvarEnd
    
    if(length(vec.factorevent2) > 0){
      nfactor <- length(vec.factorevent2)
      p.wald2 <- rep(0,nfactor)
      
      if(fit$istop == 1) fit$global_chisq2 <- waldtest(N=nvarRec2,nfact=nfactor,place=ind.placeformula2,modality=occurformula2,b=Beta,Varb=VarBeta,Lfirts=ntmp,Ntot=ntot)
      else fit$global_chisq2 <- 0 
      
      fit$dof_chisq2 <- occurformula2
      fit$global_chisq.test2 <- 1
      # Calcul de pvalue globale
      for(i in 1:length(vec.factorevent2)){
        p.wald2[i] <- signif(1 - pchisq(fit$global_chisq2[i], occurformula2[i]), 3)
      }
      fit$p.global_chisq2 <- p.wald2
      fit$names.factor2 <- vec.factorevent2
      
      
    }else{
      fit$global_chisq.test2 <- 0
    }
    fit$beta_p.value <- 1 - pchisq((fit$coef/sqrt(diag(fit$varH))[-c(1,2)])^2,1 )
    
#############################################################################
# End
    class(fit) <- "multivPenal"
    if(print.times){
      cost<-proc.time()-ptm
      cat("The program took", round(cost[3],2), "seconds \n")
    }
    

```






