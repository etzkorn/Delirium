df %>%
group_by(patient.id) %>%
summarise(rmr = mean(rmr),
total.fat.diff = total.fat.diff[1]/1000,.groups = "drop") %>%
ggplot(aes(x = rmr, y = total.fat.diff)) +
geom_point() +
stat_smooth( method = "lm", se = F, color = "red") +
theme_bw() +
ggtitle("Between-Person Association of Total Fat Loss vs. Average Resting Metabolic Rate") +
ylab("Change in Fat Mass (kg)")+
xlab("Resting Metabolic Rate")
df %>%
filter(visit.no < 4) %>%
group_by(patient.id) %>%
mutate(rmr.centered = rmr-mean(rmr)) %>%
ungroup %>%
ggplot(aes(x = rmr.centered, y = fat.diff0/1000)) +
geom_point() +
#  stat_smooth( aes(group = patient.id), method = "lm", se = F)+
stat_smooth( method = "lm", se = F, color = "red") +
#xlim(-5,5 )+
ggtitle("Within-Person Association of Fat Mass Loss vs. RMR")+
ylab("Change in Fat Mass (kg)") +
xlab("Individual Mean-Centered RMR") +
theme_bw()
gridExtra::grid.arrange(
# Total fat Mass
filter(df, visit.no>1) %>%
ggplot() +
geom_hline(aes(yintercept = 0), color = "orange", size = 2)+
geom_line(aes(x = visit.no, y = fat.diff/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = fat.diff/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Change in Fat Mass (kg)") + xlab("Visit")+ ylab("Fat Mass (kg)") +
theme(legend.position = "none"),
ggplot(df) +
geom_line(aes(x = visit.no, y = total.fat.mass/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = total.fat.mass/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Total Fat Mass (kg)") + xlab("Visit")+ ylab("Fat Mass (kg)") +
theme(legend.position = "none"),
# Total lean Mass
filter(df, visit.no>1) %>%
ggplot() +
geom_hline(aes(yintercept = 0), color = "orange", size = 2)+
geom_line(aes(x = visit.no, y = lean.diff/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = lean.diff/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Change in Lean Mass (kg)") + xlab("Visit")+ ylab("Lean Mass (kg)") +
theme(legend.position = "none"),
ggplot(df) +
geom_line(aes(x = visit.no, y = total.lean.mass/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = total.lean.mass/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Total Lean Mass (kg)") + xlab("Visit")+ ylab("Lean Mass (kg)") +
theme(legend.position = "none"),
# Total bone Mass
filter(df, visit.no>1) %>%
ggplot() +
geom_hline(aes(yintercept = 0), color = "orange", size = 2)+
geom_line(aes(x = visit.no, y = bone.diff/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = bone.diff/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Change in Bone Mass (kg)") + xlab("Visit")+ ylab("Bone Mass (kg)") +
theme(legend.position = "none"),
ggplot(df) +
geom_line(aes(x = visit.no, y = total.bone.mass/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = total.bone.mass/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Total Bone Mass (kg)") + xlab("Visit")+ ylab("Bone Mass (kg)") +
theme(legend.position = "none"),
ncol = 2)
gridExtra::grid.arrange(
# Total fat Mass
filter(df, visit.no>1) %>%
ggplot() +
geom_hline(aes(yintercept = 0), color = "orange", size = 2)+
geom_line(aes(x = visit.no, y = fat.diff/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = fat.diff/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Change in Fat Mass (kg)") + xlab("Visit")+ ylab("Fat Mass (kg)") +
theme(legend.position = "none"),
ggplot(df) +
geom_line(aes(x = visit.no, y = total.fat.mass/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = total.fat.mass/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Total Fat Mass (kg)") + xlab("Visit")+ ylab("Fat Mass (kg)") +
theme(legend.position = "none"),
# Total lean Mass
filter(df, visit.no>1) %>%
ggplot() +
geom_hline(aes(yintercept = 0), color = "orange", size = 2)+
geom_line(aes(x = visit.no, y = lean.diff/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = lean.diff/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Change in Lean Mass (kg)") + xlab("Visit")+ ylab("Lean Mass (kg)") +
theme(legend.position = "none"),
ggplot(df) +
geom_line(aes(x = visit.no, y = total.lean.mass/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = total.lean.mass/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Total Lean Mass (kg)") + xlab("Visit")+ ylab("Lean Mass (kg)") +
theme(legend.position = "none"),
# Total bone Mass
filter(df, visit.no>1) %>%
ggplot() +
geom_hline(aes(yintercept = 0), color = "orange", size = 2)+
geom_line(aes(x = visit.no, y = bone.diff/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = bone.diff/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Change in Bone Mass (kg)") + xlab("Visit")+ ylab("Bone Mass (kg)") +
theme(legend.position = "none"),
ggplot(df) +
geom_line(aes(x = visit.no, y = total.bone.mass/1000, group = patient.id), alpha = 0.5) +
stat_smooth(aes(x = visit.no, y = total.bone.mass/1000,
group = intervention, color = factor(intervention)),
se = FALSE, size = 2, method = "lm", formula = y~ I((x>1)*(x-1))+I((x>2)*(x-2))+I((x>3)*(x-3))) +
theme_classic(8) +
scale_color_manual("Treatment",values = c("#005AB5","#DC3220")) +
ggtitle("Total Bone Mass (kg)") + xlab("Visit")+ ylab("Bone Mass (kg)") +
theme(legend.position = "none"),
ncol = 2)
rm(list=ls())
library(dplyr)
library(lubridate)
source("../Zio_Package/postuR/R/calculate_removal_time.R")
source("../Zio_Package/postuR/R/check_nonwear.R")
source("../Zio_Package/postuR/R/find_top.R")
source("../Zio_Package/postuR/R/mad.R")
source("../Zio_Package/postuR/R/euclid_norm.R")
source("../Zio_Package/postuR/R/process_zacl.R")
source("../Zio_Package/postuR/R/rotate_data.R")
load("../simulation_results/metaData.rdata")
knitr::opts_chunk$set(echo = TRUE)
library(frailtypack); library(tidyverse)
source("../delirium_package/R/joint_simulate_data.R")
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
results <- tibble()
data1 <- simulate.competing.data(
n = 10000,truncate = 28,
par0 =c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 0,
alphaD = -2,
betaR = 0,
betaM = 0.5,
betaD = 0))
load("../simulation_results/metaData.rdata")
knitr::opts_chunk$set(echo = TRUE)
library(frailtypack); library(tidyverse)
source("../delirium_package/R/joint_simulate_data.R")
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
results <- tibble()
meta <-     expand.grid(betaR = 1.5, etaR = 10,
betaD = 1.75, etaD = 16,
betaD2 = 1.75, etaD2 = 16,
sigma = c(0.5, 0.75, 1),
alpha1 = c(-1, 0, 1),
alpha2 = c(-1, 0, 1),
trtR = c(-0.5, 0, 0.5),
trtD = c(-0.5, 0, 0.5),
trtD2 = c(-0.5, 0, 0.5),
i = 1:5000) %>%
mutate(simid = 1:n(),
scenario = ((simid-1) %% 729)+1,
seed = cumsum(10 + rpois(n(),10)),
n = 1500) %>%
filter(scenario %in% c(8,17,26,251,260,269,494,503,512))
save(meta, file = "../simulation_results/metaData4.rdata")
load("../simulation_results/metaData4.rdata")
knitr::opts_chunk$set(echo = TRUE)
library(frailtypack); library(tidyverse)
source("../delirium_package/R/joint_simulate_data.R")
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
results <- tibble()
load("../simulation_results/metaData.rdata")
knitr::opts_chunk$set(echo = TRUE)
library(frailtypack); library(tidyverse)
source("../delirium_package/R/joint_simulate_data.R")
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
results <- tibble()
data1 <- simulate.competing.data(
n = 10000,truncate = 28,
par0 =c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 0,
alphaD = -2,
betaR = 0,
betaM = 0,
betaD = 0))
load("../simulation_results/metaData.rdata")
knitr::opts_chunk$set(echo = TRUE)
library(frailtypack); library(tidyverse)
source("../delirium_package/R/joint_simulate_data.R")
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
results <- tibble()
competing.simulate.data
simulate.competing.data()
simulate.competing.data
options(digits = 2)
data0 <- simulate.competing.data(
n = 10, truncate = 28, version=2,
par0 = c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 0,
alphaD = -2,
betaR = 0,
betaM = 0,
betaD = 0))
data0 %>%
group_by(id) %>%
summarise(
event = sum(event),
trt = mean(trt),
terminal1 = sum(terminal1),
terminal2 = sum(terminal2),
t = max(t)) %>% summary
data0 %>%
group_by(id) %>%
summarise(
event = sum(event),
trt = mean(trt),
terminal1 = sum(terminal1),
terminal2 = sum(terminal2),
t = max(t)) %>%
ungroup %>%
group_by(terminal1, terminal2) %>%
summarise(n = n(),
studyTime = sum(t),
anyevent = 100*mean(event>0),
event = sum(event),
eventsPer100Day = 100*event / studyTime,
.groups = "drop"
)%>%
ungroup %>%
mutate(freq = 100*n/sum(n),
studyTimePerPerson = studyTime/n,
eventsPerPerson = event/n,
anyevent.all = sum(anyevent*n)/sum(n),
eventsPerPerson.all = sum(event)/sum(n),
eventsPer100Day.all = 100*sum(event) / sum(studyTime),
studyTimePerPerson.all = sum(studyTime)/sum(n)) %>%
select(-studyTime, -n, -event)
data1 <- simulate.competing.data(
n = 10000,truncate = 28,version=2,
par0 =c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 0,
alphaD = -2,
betaR = 0,
betaM = 0,
betaD = 0))
data1 %>%
group_by(id) %>%
summarise(
w = w[1],
event = sum(event),
trt = mean(trt),
terminal1 = sum(terminal1),
terminal2 = sum(terminal2),
t = max(t)) %>%
ungroup %>%
group_by(terminal1, terminal2, trt) %>%
summarise(n = n(),
st = sum(t),
terminalPct = 100*n/sum(n),
.groups = "drop",
anyevent = sum(event>0),
event = sum(event),
eventsPer100Day = 100*event / st) %>%
ungroup %>%
group_by(trt) %>%
mutate(anyevent.trt = 100*sum(anyevent)/sum(n),
eventsPer100Day.trt = 100*sum(event) / sum(st)) %>%
arrange(trt, desc(n))
data1 %>%
group_by(id) %>%
summarise(
event = sum(event),
trt = mean(trt),
terminal1 = sum(terminal1),
terminal2 = sum(terminal2),
t = max(t)) %>%
ungroup %>%
group_by(terminal1, terminal2, trt) %>%
summarise(n = n(),
st = sum(t),
terminalPct = 100*n/sum(n),
.groups = "drop",
anyevent = sum(event>0),
event = sum(event),
eventsPer100Day = 100*event / st) %>%
ungroup %>%
group_by(trt) %>%
mutate(anyevent.trt = 100*sum(anyevent)/sum(n),
eventsPer100Day.trt = 100*sum(event) / sum(st)) %>%
arrange(trt, desc(n))
data0 <- simulate.competing.data(
n = 10000,truncate = 28,version=2,
par0 =c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 0,
alphaD = -2,
betaR = 0.5,
betaM = 0,
betaD = 0))
data0 %>%
group_by(id) %>%
summarise(
event = sum(event),
trt = mean(trt),
terminal1 = sum(terminal1),
terminal2 = sum(terminal2),
t = max(t)) %>%
ungroup %>%
group_by(terminal1, terminal2, trt) %>%
summarise(n = n(),
st = sum(t),
terminalPct = 100*n/sum(n),
.groups = "drop",
anyevent = sum(event>0),
event = sum(event),
eventsPer100Day = 100*event / st) %>%
ungroup %>%
group_by(trt) %>%
mutate(anyevent.trt = 100*sum(anyevent)/sum(n),
eventsPer100Day.trt = 100*sum(event) / sum(st)) %>%
arrange(trt, desc(n))
options(digits = 2)
data0 <- simulate.competing.data(
n = 10, truncate = 28, version=2,
par0 = c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 0,
alphaD = 0,
betaR = 0,
betaM = 0,
betaD = 0))
data0 %>%
group_by(id) %>%
summarise(
event = sum(event),
trt = mean(trt),
terminal1 = sum(terminal1),
terminal2 = sum(terminal2),
t = max(t)) %>% summary
summarise.data <- function(d){
d %>%
group_by(id) %>%
summarise(
event = sum(event),
trt = mean(trt),
terminal1 = sum(terminal1),
terminal2 = sum(terminal2),
t = max(t)) %>%
ungroup %>%
group_by(terminal1, terminal2, trt) %>%
summarise(n = n(),
st = sum(t),
terminalPct = 100*n/sum(n),
.groups = "drop",
anyevent = sum(event>0),
event = sum(event),
eventsPer100Day = 100*event / st) %>%
ungroup %>%
group_by(trt) %>%
mutate(anyevent.trt = 100*sum(anyevent)/sum(n),
eventsPer100Day.trt = 100*sum(event) / sum(st)) %>%
arrange(trt, desc(n))
}
summarise.data(d)
data1 <- simulate.competing.data(
n = 10000,truncate = 28,version=2,
par0 =c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 0,
alphaD = 0,
betaR = 0,
betaM = 0.5,
betaD = 0))
summarise.data(data1)
data0 <- simulate.competing.data(
n = 10000,truncate = 28,version=2,
par0 =c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 1,
alphaD = 0,
betaR = 0,
betaM = 0,
betaD = 0))
summarise.data(data0)
data0 <- simulate.competing.data(
n = 10000,truncate = 28,version=2,
par0 =c(shapeR = 1.5,
scaleR = 10,
shapeM = 1.75,
scaleM = 16,
shapeD = 1.75,
scaleD = 16,
sigma = 0.5,
alphaM = 1,
alphaD = -1,
betaR = 0,
betaM = 0,
betaD = 0))
summarise.data(data0)
meta
table(meta$trtD)
table(meta$trtM)
table(meta$trtD2)
table(meta$trtR)
table(meta$sigma)
meta <-     expand.grid(betaR = 1.5, etaR = 10,
betaD = 1.75, etaD = 16,
betaD2 = 1.75, etaD2 = 16,
sigma = c(0.5, 0.75, 1),
alpha1 = c(-1, 0, 1),
alpha2 = c(-1, 0, 1),
trtR = c(-0.5, 0, 0.5),
trtD = c(-0.5, 0, 0.5),
trtD2 = c(-0.5, 0, 0.5),
i = 1:5000) %>%
mutate(simid = 1:n(),
scenario = ((simid-1) %% 729)+1,
seed = cumsum(10 + rpois(n(),10)),
n = 1500) %>%
filter(scenario %in% c(8,17,26,251,260,269,494,503,512))
table(meta$sigma)
table(meta$betaR)
table(meta$trtD)
table(meta$trtD2)
table(meta$trtR)
table(meta$alpha2)
save(meta, file = "../simulation_results/metaData4.rdata")
