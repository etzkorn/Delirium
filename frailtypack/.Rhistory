# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that happen after the observed terminal event
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that have risk periods which begin
# after the observed terminal event
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that have risk periods which begin
# after the observed terminal event
head(df)
df <- df %>%
mutate(terminal1 = terminal1*is.max(t),
terminal2 = terminal2*is.max(t),
event = event*!is.max(t),
t = ifelse(is.max(t), y, t)) %>%
dplyr::select(-y) %>%
#the timing of the terminal event is no longer needed as a separate variable.
ungroup
is.max(1:10)
df <- df %>%
mutate(terminal1 = terminal1*(t > y),
terminal2 = terminal2*(t > y),
event = event*(t > y),
t = ifelse(t > y, y, t)) %>%
dplyr::select(-y) %>%
#the timing of the terminal event is no longer needed as a separate variable.
ungroup
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that have risk periods which begin
# after the observed terminal event
head(df)
df <- df %>%
mutate(terminal1 = terminal1*(t > y),
terminal2 = terminal2*(t > y),
event = event*(t < y),
t = ifelse(t > y, y, t)) %>%
dplyr::select(-y) %>%
#the timing of the terminal event is no longer needed as a separate variable.
ungroup
head(df)
df$t[3]
round(df$t[5],2)
round(df$t[4],2)
df$t[3]
round(df$t[3],3)
round(df$t[3],5)
library(frailtypack); library(gt); library(tidyverse)
knitr::opts_chunk$set(echo = FALSE,message = FALSE)
load(file = "../reduce_data/processed_data_coma_delirium_2mgonly.rdata")
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2)  )
#table(df2$apache, useNA = "ifany")
#table(df2$age, useNA = "ifany")
table(df2$treatment, useNA = "ifany")
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(mean(apache), mean(age), sd(apache), sd(age), cor(age, apache))
#############################
# GAP Time Models (with/without initialization)
gap.model <-
multivPenal(formula = Surv(tstart, tstop, del) ~ treatment +
terminal(death) + terminal2(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
formula.terminalEvent2= ~treatment,
data = df2,
gapTimes = T,
jointGeneral = F,
hazard = "Weibull",
maxit = 300,
initialize = T)
library(frailtypack)
library(frailtypack); library(gt); library(tidyverse)
knitr::opts_chunk$set(echo = FALSE,message = FALSE)
load(file = "../reduce_data/processed_data_coma_delirium_2mgonly.rdata")
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2)  )
#table(df2$apache, useNA = "ifany")
#table(df2$age, useNA = "ifany")
table(df2$treatment, useNA = "ifany")
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(mean(apache), mean(age), sd(apache), sd(age), cor(age, apache))
#############################
# GAP Time Models (with/without initialization)
gap.model <-
multivPenal(formula = Surv(tstart, tstop, del) ~ treatment +
terminal(death) + terminal2(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
formula.terminalEvent2= ~treatment,
data = df2,
gapTimes = T,
jointGeneral = F,
hazard = "Weibull",
maxit = 300,
initialize = T)
gap.model$summary.table
library(frailtypack); library(gt); library(tidyverse)
knitr::opts_chunk$set(echo = FALSE,message = FALSE)
load(file = "../reduce_data/processed_data_coma_delirium_2mgonly.rdata")
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2)  )
#table(df2$apache, useNA = "ifany")
#table(df2$age, useNA = "ifany")
table(df2$treatment, useNA = "ifany")
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(mean(apache), mean(age), sd(apache), sd(age), cor(age, apache))
#############################
# GAP Time Models (with/without initialization)
gap.model <-
multivPenal(formula = Surv(tstart, tstop, del) ~ treatment +
terminal(death) + terminal2(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
formula.terminalEvent2= ~treatment,
data = df2,
gapTimes = T,
jointGeneral = F,
hazard = "Weibull",
maxit = 300,
initialize = T)
gap.model
gap.model$critCV
gap.model$summary.table
gap.model$initialization
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarisen(length(unique(id)),mean(apache), mean(age), sd(apache), sd(age), cor(age, apache))
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(length(unique(id)),mean(apache), mean(age), sd(apache), sd(age), cor(age, apache))
gap.model1 <-
frailtyPenal(formula = Surv(gap, del) ~ treatment+
terminal(death) + cluster(id),
formula.terminalEvent = ~treatment,
data = df2,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
init.Alpha = 14,
init.B = c(-0.0182,-0.0504),
init.Theta = 0.238^2,
maxit = 300)
gap.model1
gap.model1 <-
frailtyPenal(formula = Surv(gap, del) ~ treatment+
terminal(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
data = df2,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
init.Alpha = 14,
init.B = c(-0.0182,-0.0504),
init.Theta = 0.238^2,
maxit = 300)
gap.model1 <-
frailtyPenal(formula = Surv(gap, del) ~ treatment+
terminal(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
data = df2,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
maxit = 300)
gap.model1
df2
gap.model1 <-
frailtyPenal(formula = Surv(tstart, tstop, del) ~ treatment+
terminal(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
data = df2,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
maxit = 300)
gap.model1
source("../delirium_package/R/competing_simulate_data.R")
df <- simulate.competing.data(n = 1500, truncate = 28, par0 = c(1,1,1,1,1,1,.2,-.2,0,0,0))
source("../delirium_package/R/random_weibull.R")
df <- simulate.competing.data(n = 1500, truncate = 28, par0 = c(1,1,1,1,1,1,.2,-.2,0,0,0))
df <- simulate.competing.data(n = 1500, truncate = 28, par0 = c(betaR = 1,etaR =1,betaD=1,etaD=1,betaD2 = 1,etaD2 = 1,alpha1 =.2,alpha2=-.2,trtR = 0,trtD = 0,trtD2 = 0))
warnings
warnings()
df <- simulate.competing.data(n = 1500, truncate = 28, par0 = c(betaR = 1,etaR =1,betaD=1,etaD=1,betaD2 = 1,etaD2 = 1,alpha1 =.2,alpha2=-.2,trtR = 0,trtD = 0,trtD2 = 0))
simulate.competing.data()
simulate.competing.data
df <- simulate.competing.data(n = 1500, truncate = 28, par0 = c(betaR = 1,etaR =1,betaD=1,etaD=1,betaD2 = 1,etaD2 = 1,sigma = 0.2,alpha1 =.2,alpha2=-.2,trtR = 0,trtD = 0,trtD2 = 0))
gap.model1 <-
frailtyPenal(formula = Surv(tstart, tstop, event) ~ trt+
terminal(terminal1) + cluster(id),
formula.terminalEvent = ~trt,
data = df,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
maxit = 300)
df
gap.model1 <-
frailtyPenal(formula = Surv(t0, t, event) ~ trt+
terminal(terminal1) + cluster(id),
formula.terminalEvent = ~trt,
data = df,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
maxit = 300)
gap.model
gap.model1
gap.model1 <-
frailtyPenal(formula = Surv(g, event) ~ trt+
terminal(terminal1) + cluster(id),
formula.terminalEvent = ~trt,
data = df,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
maxit = 300)
gap.model1
# the death initialization model for the gap.model doesn't work, so we set some starting vals
gap.model1 <-
frailtyPenal(formula = Surv(gap, del) ~ treatment + I(apache/5 - 19/5) + I(age/10 - 65/10) +
terminal(death) + cluster(id),
formula.terminalEvent = ~treatment + I(apache/5 - 19/5) + I(age/10 - 65/10),
data = df2,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
init.Alpha = 14,
init.B = c(-0.0216,0.0636,0.0283,-0.0519,0.0807,0.236),
init.Theta = 0.238^2,
maxit = 300)
gap.model1 <-
frailtyPenal(formula = Surv(gap, del) ~ treatment + I(apache/5 - 19/5) + I(age/10 - 65/10) +
terminal(discharge) + cluster(id),
formula.terminalEvent = ~treatment + I(apache/5 - 19/5) + I(age/10 - 65/10),
data = df2,
recurrentAG = F,
hazard = "Weibull", RandDist = "LogN",
init.Alpha = 14,
init.B = c(-0.0216,0.0636,0.0283,-0.0519,0.0807,0.236),
init.Theta = 0.238^2,
maxit = 300)
gap.model1
#############################
# GAP Time Models (with/without initialization)
gap.model <-
multivPenal(formula = Surv(tstart, tstop, del) ~ treatment + I(apache/5 - 19/5) + I(age/10 - 65/10)+
terminal(death) + terminal2(discharge) + cluster(id),
formula.terminalEvent = ~treatment+ I(apache/5- 19/5)+ I(age/10 - 65/10),
formula.terminalEvent2= ~treatment+ I(apache/5- 19/5)+ I(age/10 - 65/10),
data = df2,
gapTimes = T,
jointGeneral = F,
hazard = "Weibull",
maxit = 300,
initialize = F,
init.Sigma = 0.25,
init.Alpha1 = 14,
init.Alpha2 = -5,
init.hazard = c(0.34, 6.64, 2.6, 78.5, 1.51, 8.23),
init.B = rep(0,9))
gap.model
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(length(unique(id)),
mean(apache), mean(age),
sd(apache), sd(age),
cor(age, apache),
quantile(age,0.25),
quantile(age,0.5),
quantile(age,0.75),
min(age), max(age))
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(length(unique(id)),
mean(apache), mean(age),
sd(apache), sd(age),
cor(age, apache),
quantile(age,0.25),
quantile(age,0.5),
quantile(age,0.75),
mean(age<50), mean(age<60),mean(age<70), mean(age<80),
min(age), max(age))
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2),
age60 = 1*(age<60),
age70 = 1*(age<70),
age80 = 1*(age<80))
load(file = "../reduce_data/processed_data_coma_delirium_2mgonly.rdata")
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2),
age60 = 1*(age<60),
age70 = 1*(age<70),
age80 = 1*(age<80))
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(length(unique(id)),
mean(apache), mean(age),
sd(apache), sd(age),
cor(age, apache),
quantile(age,0.25),
quantile(age,0.5),
quantile(age,0.75),
mean(age<50), mean(age<60),mean(age<70), mean(age<80),
min(age), max(age))
library(frailtypack)
