id = .data$id[1],
trt = .data$trt[1],
y = .data$y[1],
terminal1 = .data$terminal1[1],
terminal2 = .data$terminal2[1],
t = .data$y[1],
event = 0
)
)
)
df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
dplyr::filter(t <= y) %>%
# eliminate recurrent events that happen after the observed terminal event
group_by(id) %>%
group_modify(
~ add_row(.x, ,
tibble_row(
id = .data$id[1],
trt = .data$trt[1],
y = .data$y[1],
terminal1 = .data$terminal1[1],
terminal2 = .data$terminal2[1],
t = .data$y[1],
event = 0
)
)
)
df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
dplyr::filter(t <= y) %>%
# eliminate recurrent events that happen after the observed terminal event
group_by(id) %>%
group_modify(
~ add_row(.x)
)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
dplyr::filter(t <= y)
df
df %>%
group_by(id) %>%
summarise(trt = trt[1],
y = y[1],
terminal1 = terminal1[1],
terminal2 = terminal2[1],
t = y[1],
event = 0) %>%
bind_rows(df)
df <- df %>%
group_by(id) %>%
summarise(trt = trt[1],
y = y[1],
terminal1 = terminal1[1],
terminal2 = terminal2[1],
t = y[1],
event = 0) %>%
ungroup %>%
bind_rows(df)
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
dplyr::filter(t <= y)
# eliminate recurrent events that happen after the observed terminal event
df <- df %>%
group_by(id) %>%
summarise(trt = trt[1],
y = y[1],
terminal1 = terminal1[1],
terminal2 = terminal2[1],
t = y[1],
event = 0) %>%
ungroup %>%
bind_rows(df) %>%
arrange(id, t)
# add one more row to each person's data that represents a censored
# recurrent event: the time of the terminal event.
add_row()
df
df <- df %>%
group_by(id) %>%
summarise(trt = trt[1],
y = y[1],
terminal1 = terminal1[1],
terminal2 = terminal2[1],
t = y[1],
event = 0) %>%
ungroup %>%
bind_rows(df) %>%
# add one more row to each person's data that represents a censored
# recurrent event: the time of the terminal event.
arrange(id, t) %>%
dplyr::select(-y) %>%
# we no longer need the terminal event time as a separate column,
# as it is stored in the variable t.
group_by(id) %>%
mutate(terminal1 = terminal1*is.max(t),
terminal2 = terminal2*is.max(t))
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
# we only retain the indicator for the terminal event for the row in
# which corresponds to the timing of the terminal event.
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
dplyr::filter(t <= y)
# eliminate recurrent events that happen after the observed terminal event
head(df)
# we only retain the indicator for the terminal event for the row in
# which corresponds to the timing of the terminal event.
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that happen after the observed terminal event
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that have risk periods which begin
# after the observed terminal event
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that have risk periods which begin
# after the observed terminal event
head(df)
df <- df %>%
mutate(terminal1 = terminal1*is.max(t),
terminal2 = terminal2*is.max(t),
event = event*!is.max(t),
t = ifelse(is.max(t), y, t)) %>%
dplyr::select(-y) %>%
#the timing of the terminal event is no longer needed as a separate variable.
ungroup
is.max(1:10)
df <- df %>%
mutate(terminal1 = terminal1*(t > y),
terminal2 = terminal2*(t > y),
event = event*(t > y),
t = ifelse(t > y, y, t)) %>%
dplyr::select(-y) %>%
#the timing of the terminal event is no longer needed as a separate variable.
ungroup
head(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse,quietly = T)
set.seed(654321)
par0 <- c(shapeR = 0.34, scaleR = 6.64, shapeM = 2.59, scaleM = 78.5, shapeD = 1.51, scaleD = 8.23,
sigma = 0.24, alphaM = 14.7, alphaD = -6.1, betaR = -0.25, betaM = -0.25, betaD = 0.25)
n <- 1500
K <- 28
rweibRH <- function(n, shape ,scale , rh){
rweibull(n, shape = shape, scale = scale * rh^(-1/shape))
}
df <- tibble(
id = 1:n,
trt = rbinom(n,1,.5),
# treatment is assigned independently with equal probability
w = rnorm(n, 0, par0["sigma"]),
# draw frailty terms from a multivariate normal
T1 = rweibRH(n,
shape = par0["shapeM"],
scale = par0["scaleM"],
rh = exp(w*par0["alphaM"] + par0["betaM"] * trt)),
# draw a mortality time
T2 = rweibRH(n,
shape = par0["shapeD"],
scale = par0["scaleD"],
rh = exp(w*par0["alphaD"] + par0["betaD"] * trt)),
# draw a discharge time
y = pmin(T1, T2, K),
# determine the timing of the endpoint
terminal1 = as.numeric(T1 < T2 & T1 < K),
terminal2 = as.numeric(T2 < T1 & T2 < K),
# determine which endpoint we observe (death, discharge, or censoring)
t =  map2(w,trt,
~tibble(
t = rweibRH(50,
shape = par0["shapeR"],
scale = par0["scaleR"],
rh = exp(.x + par0["betaR"] * .y)) %>%
rbind(rweibull(50, shape = 1, scale = 2)) %>%
cumsum,
event = rep(1:0, length = 100)
)
)
)
# we draw a large number (50) of iid gap times for delirium onset and
# alternate them with independent gap times for delirium duration and
# take the cumulative sum.
head(df)
df <- df %>%
dplyr::select(-T1, -T2, -w) %>%
# throw out the unobserved variables
unnest(t) %>%
# unnest the gap times
group_by(id) %>%
mutate(tstart = c(0, t[-n()])) %>%
# create a variable that represents the beginning of the risk period
dplyr::filter(tstart<=y)
# eliminate recurrent events that have risk periods which begin
# after the observed terminal event
head(df)
df <- df %>%
mutate(terminal1 = terminal1*(t > y),
terminal2 = terminal2*(t > y),
event = event*(t < y),
t = ifelse(t > y, y, t)) %>%
dplyr::select(-y) %>%
#the timing of the terminal event is no longer needed as a separate variable.
ungroup
head(df)
df$t[3]
round(df$t[5],2)
round(df$t[4],2)
df$t[3]
round(df$t[3],3)
round(df$t[3],5)
