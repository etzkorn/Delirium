knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(frailtypack); library(tidyverse)
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
source("../delirium_package/R/extract_frailtypack_coef_weibullgap.R")
set.seed(080621)
par00 = c(betaR = 1, etaR = 8,
betaD = 1.8, etaD = 25,
betaD2 = 1.15, etaD2 = 10,
theta = 0.5, alpha1 = 0.15, alpha2 = -0.3,
trtR = -0.1, trtD = -0.05, trtD2 = 0.075)
# put in treatment effects
# opposite directions for alpha
#alpha1 = 0.15
#alpha2 = -0.3
data <-
simulate.competing.data(n = 1200, truncate = 28, par0 = par00)
data %>%
group_by(id) %>%
summarise(del = any(event==1),
death = any(terminal1==1),
discharge = any(terminal2==1)) %>%
summarise(mean(del), mean(death), mean(discharge),
mean(death*del)/mean(death), mean((discharge*del))/mean(discharge)) %>%
t
mod0 <-
multivPenal(
formula = Surv(t0, t, event)~cluster(id)+trt+terminal(terminal1)+terminal2(terminal2),
formula.terminalEvent=~trt,
formula.terminalEvent2=~trt,
data=data,
jointGeneral = F,
initialize = T,
save.progress = T,
hazard = "Weibull",
gapTimes=T,
maxit = 200)
mod0$initialization$joint1
mod0$critCV
mod0$summary.table
library(frailtypack)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(frailtypack); library(tidyverse)
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
source("../delirium_package/R/extract_frailtypack_coef_weibullgap.R")
set.seed(080721)
par00 = c(betaR = 1, etaR = 10,
betaD = 1.85, etaD = 25,
betaD2 = 1.15, etaD2 = 10,
theta = 0.2, alpha1 = -0.12, alpha2 = -0.32,
trtR = -0.08, trtD = 0.07, trtD2 = 0.08)
# put in treatment effects
# opposite directions for alpha
#alpha1 = 0.15
#alpha2 = -0.3
data <-
simulate.competing.data(n = 1500, truncate = 28, par0 = par00)
data %>%
group_by(id) %>%
summarise(del = any(event==1),
no.del = sum(event==1),
death = any(terminal1==1),
discharge = any(terminal2==1)) %>%
summarise(mean(del), max(no.del), mean(death), mean(discharge),
mean(death*del)/mean(death), mean((discharge*del))/mean(discharge)) %>%
t
mod0 <-
multivPenal(
formula = Surv(t0, t, event)~cluster(id)+trt+terminal(terminal1)+terminal2(terminal2),
formula.terminalEvent=~trt,
formula.terminalEvent2=~trt,
data=data,
jointGeneral = F,
initialize = T,
save.progress = T,
hazard = "Weibull",
gapTimes=T,
maxit = 350)
mod0$b
mod0$initialization$b
mod0b <- # without initialization
multivPenal(
formula = Surv(t0, t, event)~cluster(id)+trt+terminal(terminal1)+terminal2(terminal2),
formula.terminalEvent=~trt,
formula.terminalEvent2=~trt,
data=data,
jointGeneral = F,
initialize = ,
save.progress = T,
hazard = "Weibull",
gapTimes=T,
maxit = 350)
mod0b <- # without initialization
multivPenal(
formula = Surv(t0, t, event)~cluster(id)+trt+terminal(terminal1)+terminal2(terminal2),
formula.terminalEvent=~trt,
formula.terminalEvent2=~trt,
data=data,
jointGeneral = F,
initialize = F,
save.progress = T,
hazard = "Weibull",
gapTimes=T,
maxit = 350)
mod0$critCV
mod0$summary.table
mod0b$critCV
mod0b$b
mod0$b
mod0$initialization$b
nvar
f <- function(b){
c(b[1:5]^2,
b[(np-nvar+1):(np-nbvar[4])])
}
mod0
f(mod0$initialization$joint1$b)
np = 12
f(mod0$initialization$joint1$b)
nvar = 3
nbvar = c(1,1,1,1)
f(mod0$initialization$joint1$b)
b
mod0$b
nvar
f <- function(b){
c(b[1:5]^2,
b[(np-nvar-2):(np-nbvar[4]-2)])
}
f(mod0$initialization$joint1$b)
mod0$initialization$joint1$b
mod0$initialization$joint1$bb[(np-nvar-2):(np-nbvar[4]-2)]
mod0$initialization$joint1$b[(np-nvar-2):(np-nbvar[4]-2)]
mod0$initialization$joint1$ b[(np-3-nbvar[4]-nbvar[1]-nbvar[2]+1):(np-3-nbvar[4])]
nvar
f(mod0$initialization$b)
f1.prime <- function(b){
diag(c(2*b[1:5],
rep(1,nvar-nbvar[4] + 1)))
}
f.prime(mod0$initialization$b)
f1.prime(mod0$initialization$b)
ans$initialization$joint1$H
mod0$initialization$joint1$H
mod0$initialization$joint1$varH
mod0$initialization$joint1$varHtotal
ans <- mod0
ans
ans$initialization$varH.Estimate1 <-
f.prime(ans$initialization$joint1$b) %*%
ans$initialization$joint1$varHtotal %*%
f.prime(ans$initialization$joint1$b)
ans$initialization$varH.Estimate1 <-
f1.prime(ans$initialization$joint1$b) %*%
ans$initialization$joint1$varHtotal %*%
f1.prime(ans$initialization$joint1$b)
ans$initialization$varH.Estimate1
ans$initialization$varH.Estimate2 <-
f1.prime(ans$initialization$joint2$b) %*%
ans$initialization$joint2$varHtotal %*%
f1.prime(ans$initialization$joint2$b)
c(sqrt(diag(ans$initialization$joint1$varHtotal)),
sqrt(diag(ans$initialization$joint2$varHtotal)))
c(f1(ans$initialization$joint1$b), f1(ans$initialization$joint2$b))
c(b[1:5]^2,
b[(np-3-nvar+1):(np-3-nbvar[4])])
# Extract Transformed Parameters
f1 <- function(b){
c(b[1:5]^2,
b[(np-3-nvar+1):(np-3-nbvar[4])])
}
c(sqrt(diag(ans$initialization$joint1$varHtotal)),
sqrt(diag(ans$initialization$joint2$varHtotal)))
c(f1(ans$initialization$joint1$b), f1(ans$initialization$joint2$b))
c(ans$initialization$joint1$b, ans$initialization$joint2$b)
f1.prime <- function(b){
diag(c(2*b[1:(np-3-nvar)],
rep(1,nvar-nbvar[4] + 1)))
}
ans$initialization$varH.Estimate1 <-
f1.prime(ans$initialization$joint1$b) %*%
ans$initialization$joint1$varHtotal %*%
f1.prime(ans$initialization$joint1$b)
# Extract Transformed Parameters
f1 <- function(b){
c(b[1:(np-3-nvar)]^2,
b[(np-3-nvar+1):length(b)])
}
f1.prime <- function(b){
diag(c(2*b[1:(np-3-nvar)],
rep(1,nvar-nbvar[4] + 1)))
}
ans$initialization$varH.Estimate1 <-
f1.prime(ans$initialization$joint1$b) %*%
ans$initialization$joint1$varHtotal %*%
f1.prime(ans$initialization$joint1$b)
f1.prime(ans$initialization$joint1$b)
ans$initialization$joint1$varHtotal
np
nvar
# Extract Transformed Parameters
f1 <- function(b, i=3){
c(b[1:(length(b)-nvar+nbvar[i])]^2,
b[(length(b)-nvar+nbvar[i]+1):length(b)])
}
f1.prime <- function(b){
diag(c(2*b[1:(np-3-nvar)],
rep(1,nvar-nbvar[4])))
}
f1 <- function(b, i=3){
c(b[1:(length(b)-nvar+nbvar[i])]^2,
b[(length(b)-nvar+nbvar[i]+1):length(b)])
}
f1.prime <- function(b, i = 3){
diag(c(2*b[1:(length(b)-nvar+nbvar[i])],
rep(1,nvar-nbvar[i])))
}
f1.prime(ans$initialization$joint1$b)
ans$initialization$joint1$varHtotal
f1.prime(ans$initialization$joint1$b)
ans$initialization$varH.Estimate2 <-
f1.prime(ans$initialization$joint2$b, i=4) %*%
ans$initialization$joint2$varHtotal %*%
f1.prime(ans$initialization$joint2$b, i=4)
c(ans$initialization$joint1$b, ans$initialization$joint2$b)
c(sqrt(diag(ans$initialization$joint1$varHtotal)),
sqrt(diag(ans$initialization$joint2$varHtotal)))
c(f1(ans$initialization$joint1$b), f1(ans$initialization$joint2$b, i=4))
c(sqrt(diag(ans$initialization$varH.Estimate1)),
sqrt(diag(ans$initialization$varH.Estimate2)))
ans$initialization$summary.table <- tibble(
Parameter = Parameter,
Raw = c(ans$initialization$joint1$b, ans$initialization$joint2$b),
Raw.SE = c(sqrt(diag(ans$initialization$joint1$varHtotal)),
sqrt(diag(ans$initialization$joint2$varHtotal))),
Estimate = c(f1(ans$initialization$joint1$b), f1(ans$initialization$joint2$b, i=4)),
Estimate.SE = c(sqrt(diag(ans$initialization$varH.Estimate1)),
sqrt(diag(ans$initialization$varH.Estimate2))),
LB95 = f(Raw - 2*Raw.SE),
UB95 = f(Raw + 2*Raw.SE),
p = 2*pnorm(q = -abs(Raw), mean = 0, sd = Raw.SE)
)
Parameters = c("Shape, Recurrent", "Scale, Recurrent",
"Shape, Terminal1", "Scale, Terminal1",
"Sigma, Terminal1", "Alpha, Terminal1",
paste0("Beta",1:(nbvar[1]+nbvar[2])),
"Shape, Recurrent", "Scale, Recurrent",
"Shape, Terminal2", "Scale, Terminal2",
"Sigma, Terminal2", "Alpha, Terminal2",
paste0("Beta",1:(nbvar[1]+nbvar[4])))
ans$initialization$summary.table <- tibble(
Parameter = Parameters,
Raw = c(ans$initialization$joint1$b, ans$initialization$joint2$b),
Raw.SE = c(sqrt(diag(ans$initialization$joint1$varHtotal)),
sqrt(diag(ans$initialization$joint2$varHtotal))),
Estimate = c(f1(ans$initialization$joint1$b), f1(ans$initialization$joint2$b, i=4)),
Estimate.SE = c(sqrt(diag(ans$initialization$varH.Estimate1)),
sqrt(diag(ans$initialization$varH.Estimate2))),
LB95 = f(Raw - 2*Raw.SE),
UB95 = f(Raw + 2*Raw.SE),
p = 2*pnorm(q = -abs(Raw), mean = 0, sd = Raw.SE)
)
ans$initialization$summary.table <- tibble(
Parameter = Parameters,
Raw = c(ans$initialization$joint1$b, ans$initialization$joint2$b),
Raw.SE = c(sqrt(diag(ans$initialization$joint1$varHtotal)),
sqrt(diag(ans$initialization$joint2$varHtotal))),
Estimate = c(f1(ans$initialization$joint1$b), f1(ans$initialization$joint2$b, i=4)),
Estimate.SE = c(sqrt(diag(ans$initialization$varH.Estimate1)),
sqrt(diag(ans$initialization$varH.Estimate2))),
p = 2*pnorm(q = -abs(Raw), mean = 0, sd = Raw.SE)
)
ans$initialization$summary.table
library(frailtypack)
.71*60
0.71/0.51*20
