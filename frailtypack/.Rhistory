stop("init.Sigma must have length 1 when jointGeneral = F.")
}
if(length(init.B) != nvar){
stop("init.B must be the same length as the number of coefficients.")
}
# If initialization indicated, replace values
if(initialize){
# ignore user-supplied initialization values if initialize == T
init.hazard <- init.hazard*0 + 1
init.B <- init.B*0
# recreate time variable in original data set in case of gap times, create new formula
if(gapTimes){
#data$gapTimes <- tt11
initialization.formula <-
paste("Surv(gapTimes, ", EVENT1, ")",
paste(gsub("Surv(.*)","", as.character(formula)), collapse = ""),
collapse = "")
data$gapTimes <- tt11
initialization.formula <-
paste("Surv(gapTimes, ", EVENT1, ")",
paste(gsub("Surv(.*)","", as.character(formula)), collapse = ""),
collapse = "")
}else{
initialization.formula <- formula
}
#initialization.formula <- formula
# create separate formulas for each initialization model
initialization.formula1 <- drop.terms(terms(initialization.formula),
survival::untangle.specials(terms(initialization.formula, c("terminal2")), "terminal2", 1:10)$terms,
keep.response = T)
initialization.formula1 <- formula(initialization.formula1)
initialization.formula2 <- drop.terms(terms(initialization.formula),
survival::untangle.specials(terms(initialization.formula, c("terminal")), "terminal", 1:10)$terms,
keep.response = T)
initialization.formula2 <- formula(initialization.formula2)
initialization.formula2 <- sub("terminal2\\(","terminal\\(",initialization.formula2)
initialization.formula2 <- formula(paste0(initialization.formula2[2:3], collapse = "~"))
# fit two joint models for initialization
mod.joint1<-
frailtyPenal(formula = initialization.formula1,
# this line drops the "terminal2" term from the original model formula
formula.terminalEvent = formula.terminalEvent,
jointGeneral = F,
data = data,
recurrentAG= !gapTimes,
hazard = "Weibull", RandDist = "LogN",
maxit = 100, print.times = F)
mod.joint2<-
frailtyPenal(formula = initialization.formula2,
# this line drops the "terminal" term from the original model formula
formula.terminalEvent = formula.terminalEvent2,
jointGeneral = F,
data = data,
recurrentAG= !gapTimes,
hazard = "Weibull", RandDist = "LogN",
maxit = 100, print.times = F)
# Grab initialized values
# Note: Joint model optimizes on the square root scale
# for hazard parameters and frailty
# variance, so we have to square to get to the true scale.
# Recurrent Hazard
init.hazard[1:(2+n.knots)] <- (mod.joint1$b[1:(2+n.knots)]^2 + mod.joint2$b[1:(2+n.knots)]^2)/2
# average estimates from the two models
# Terminal 1 Hazard
init.hazard[(3+n.knots):(4+n.knots*2)] <- mod.joint1$b[(3+n.knots):(4+n.knots*2)]^2
# Terminal 2 Hazard
init.hazard[(5+n.knots*2):(6+n.knots*3)] <- mod.joint2$b[(3+n.knots):(4+n.knots*2)]^2
# Random Effect Variance
if(!jointGeneral){
init.Sigma <- (abs(mod.joint1$b[5+n.knots*2]) + abs(mod.joint2$b[5+n.knots*2]))/2
# average estimates from the two models
}else{
init.Sigma[1] <- abs(mod.joint1$b[5+n.knots*2])
init.Sigma[2] <- abs(mod.joint2$b[5+n.knots*2])
init.Sigma[3] <- 0 # rho, covariance
}
# Alpha
init.Alpha1 <- mod.joint1$b[6+n.knots*2]
init.Alpha2 <- mod.joint2$b[6+n.knots*2]
# Coefficients
if(noVarEvent[1] == 0){
# average two estimates
init.B[1:nbvar[1]] <- (mod.joint1$b[(7+n.knots*2):(6+n.knots*2+nbvar[1])] + mod.joint2$b[(7+n.knots*2):(6+n.knots*2+nbvar[1])])/2
}
if(noVarEvent[2] == 0){
init.B[(1+nbvar[1]):(nbvar[1]+nbvar[2])] <- mod.joint1$b[(7+n.knots*2+nbvar[1]):(6+n.knots*2+nbvar[1]+nbvar[2])]
}
if(noVarEvent[4] == 0){
init.B[(1+nbvar[1]+nbvar[2]):(nbvar[1]+nbvar[2]+nbvar[4])] <- mod.joint2$b[(7+n.knots*2+nbvar[1]):(6+n.knots*2+nbvar[1]+nbvar[4])]
}
}
# ignore user-supplied initialization values if initialize == T
init.hazard <- init.hazard*0 + 1
init.B <- init.B*0
# recreate time variable in original data set in case of gap times, create new formula
if(gapTimes){
#data$gapTimes <- tt11
initialization.formula <-
paste("Surv(gapTimes, ", EVENT1, ")",
paste(gsub("Surv(.*)","", as.character(formula)), collapse = ""),
collapse = "")
data$gapTimes <- tt11
initialization.formula <-
paste("Surv(gapTimes, ", EVENT1, ")",
paste(gsub("Surv(.*)","", as.character(formula)), collapse = ""),
collapse = "")
}else{
initialization.formula <- formula
}
# create separate formulas for each initialization model
initialization.formula1 <- drop.terms(terms(initialization.formula),
survival::untangle.specials(terms(initialization.formula, c("terminal2")), "terminal2", 1:10)$terms,
keep.response = T)
initialization.formula
# create separate formulas for each initialization model
initialization.formula <- terms(initialization.formula, specials = specials)
specials
initialization.formula
terms(initialization.formula, specials = specials)
initialization.formula
initialization.formula
terms(initialization.formula, specials = specials)
terms(initialization.formula)
initialization.formula
terms(initialization.formula, c("terminal2"))
gapTimes
initialization.formula
colnames(data)
terms(y ~ x + z)
initialization formula
initialization.formula
initialization.formula <- as.fomula(initialization.formula)
initialization.formula <- fomula(initialization.formula)
initialization.formula <- as.formula(initialization.formula)
initialization.formula
# create separate formulas for each initialization model
initialization.formula <- terms(initialization.formula, specials = specials)
initialization.formula1 <- drop.terms(terms(initialization.formula),
survival::untangle.specials(terms(initialization.formula, c("terminal2")), "terminal2", 1:10)$terms,
keep.response = T)
initialization.formula1 <- formula(initialization.formula1)
initialization.formula2 <- drop.terms(terms(initialization.formula),
survival::untangle.specials(terms(initialization.formula, c("terminal")), "terminal", 1:10)$terms,
keep.response = T)
initialization.formula2 <- formula(initialization.formula2)
initialization.formula2 <- sub("terminal2\\(","terminal\\(",initialization.formula2)
initialization.formula2 <- formula(paste0(initialization.formula2[2:3], collapse = "~"))
# fit two joint models for initialization
mod.joint1<-
frailtyPenal(formula = initialization.formula1,
# this line drops the "terminal2" term from the original model formula
formula.terminalEvent = formula.terminalEvent,
jointGeneral = F,
data = data,
recurrentAG= !gapTimes,
hazard = "Weibull", RandDist = "LogN",
maxit = 100, print.times = F)
mod.joint2<-
frailtyPenal(formula = initialization.formula2,
# this line drops the "terminal" term from the original model formula
formula.terminalEvent = formula.terminalEvent2,
jointGeneral = F,
data = data,
recurrentAG= !gapTimes,
hazard = "Weibull", RandDist = "LogN",
maxit = 100, print.times = F)
library(frailtypack)
library(frailtypack); library(gt); library(tidyverse)
knitr::opts_chunk$set(echo = FALSE,message = FALSE)
load(file = "../reduce_data/processed_data_coma_delirium_2mgonly.rdata")
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2),
age60 = 1*(age<60),
age70 = 1*(age<70),
age80 = 1*(age<80))
#table(df2$apache, useNA = "ifany")
#table(df2$age, useNA = "ifany")
table(df2$treatment, useNA = "ifany")
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(length(unique(id)),
mean(apache), mean(age),
sd(apache), sd(age),
cor(age, apache),
quantile(age,0.25),
quantile(age,0.5),
quantile(age,0.75),
mean(age<50), mean(age<60),mean(age<70), mean(age<80),
min(age), max(age))
#############################
# GAP Time Models (with/without initialization)
gap.model <-
multivPenal(formula = Surv(tstart, tstop, del) ~ treatment +
terminal(death) + terminal2(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
formula.terminalEvent2= ~treatment,
data = df2,
gapTimes = T,
jointGeneral = F,
hazard = "Weibull",
maxit = 300,
initialize = T)
library(frailtypack)
library(frailtypack); library(gt); library(tidyverse)
knitr::opts_chunk$set(echo = FALSE,message = FALSE)
load(file = "../reduce_data/processed_data_coma_delirium_2mgonly.rdata")
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2),
age60 = 1*(age<60),
age70 = 1*(age<70),
age80 = 1*(age<80))
#table(df2$apache, useNA = "ifany")
#table(df2$age, useNA = "ifany")
table(df2$treatment, useNA = "ifany")
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(length(unique(id)),
mean(apache), mean(age),
sd(apache), sd(age),
cor(age, apache),
quantile(age,0.25),
quantile(age,0.5),
quantile(age,0.75),
mean(age<50), mean(age<60),mean(age<70), mean(age<80),
min(age), max(age))
#############################
# GAP Time Models (with/without initialization)
gap.model <-
multivPenal(formula = Surv(tstart, tstop, del) ~ treatment +
terminal(death) + terminal2(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
formula.terminalEvent2= ~treatment,
data = df2,
gapTimes = T,
jointGeneral = F,
hazard = "Weibull",
maxit = 300,
initialize = T)
library(frailtypack)
library(frailtypack); library(gt); library(tidyverse)
knitr::opts_chunk$set(echo = FALSE,message = FALSE)
load(file = "../reduce_data/processed_data_coma_delirium_2mgonly.rdata")
df2 <- df2 %>% ungroup %>%
filter(study_arm!=3 & (apache > 0) & !is.na(apache))%>%
mutate(gap = tstop - tstart,
id = dense_rank(id),
treatment = 1*(study_arm==2),
age60 = 1*(age<60),
age70 = 1*(age<70),
age80 = 1*(age<80))
#table(df2$apache, useNA = "ifany")
#table(df2$age, useNA = "ifany")
table(df2$treatment, useNA = "ifany")
df2 %>% group_by(id) %>% summarise(apache = apache[1], age = age[1]) %>%
summarise(length(unique(id)),
mean(apache), mean(age),
sd(apache), sd(age),
cor(age, apache),
quantile(age,0.25),
quantile(age,0.5),
quantile(age,0.75),
mean(age<50), mean(age<60),mean(age<70), mean(age<80),
min(age), max(age))
#############################
# GAP Time Models (with/without initialization)
gap.model <-
multivPenal(formula = Surv(tstart, tstop, del) ~ treatment +
terminal(death) + terminal2(discharge) + cluster(id),
formula.terminalEvent = ~treatment,
formula.terminalEvent2= ~treatment,
data = df2,
gapTimes = T,
jointGeneral = F,
hazard = "Weibull",
maxit = 300,
initialize = T)
gap.model$summary.table
library(frailtypack)
devtools::document()
summary(sample.accel)
library(postuR)
data("sample.accel")
summary(sample.accel)
df <-
postuR:::rotate.data(sample.accel, from = c(0.17392, 0.3844, 0.2012), to = c(0,0,1))
df <-
select(sample.accel, x:z) %>%
postuR:::rotate.data(from = c(0.17392, 0.3844, 0.2012), to = c(0,0,1))
library(tidyverse)
df <-
select(sample.accel, x:z) %>%
postuR:::rotate.data(from = c(0.17392, 0.3844, 0.2012), to = c(0,0,1))
head(df)
plot(data = df[1:(1440*60*1.57),], y~x)
with(df[1:(1440*60*1.57),], plot(y~x))
df <-
select(sample.accel, x:z) %>%
postuR:::rotate.data(from = c(0.17392, 0.3844, 0.2012), to = c(0,0,1))
head(df)
with(df[1:(1440*60*1.57),], plot(ry~rx))
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
postuR:::rotate.data(from = c(0.17392, 0.3844, 0.2012), to = c(0,0,1))
summary(sample.accel[1:(1440*60*1.57),])
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
postuR:::rotate.data(from = c(0.4124, 0.6288, 0.32986), to = c(0,0,1))
with(df[1:(1440*60*1.57),], plot(ry~rx))
with(df, plot(ry~rx))
cov(x, y)
with(df, cov(ry,rx))
x <- rnorm(100)
cov(x,x)
var(x)
x <- (1:100) + rnorm(100)
y <- (1:100) + rnorm(100)
cov(x,y)
var(x)
var(y)
x <- (1:100)/10 + rnorm(100)
y <- (1:100)/10 + rnorm(100)
cov(x,y)
var(x)
var(y)
x <- x/sd(x)
y <- y/sd(y)
cov(x,y)
var(x)
var(y)
lm(y~x)
lm(x~y)
x <- (1:100)/10 + rnorm(100)
y <- (1:100)/10 + rnorm(100)
x <- (x - mean(x))/sd(x)
y <- (y- mean(y))/sd(y)
cov(x,y)
var(x)
var(y)
lm(y~x)
lm(x~y)
cov(x,y)
cor(x,y)
with(df, cov(ry,rx))
with(df, cor(ry,rx))
sd(df$rx)
sd(df$ry)
pc <- prcomp(df[c("rx","ry"),],
center = TRUE,
scale. = F)
summary(df)
pc <- prcomp(df[,c("rx","ry")],
center = TRUE,
scale. = F)
pc
names(pc)
names(pc)$rotateion
names(pc)$rotation
(pc)$rotation
with(df, plot(df[,c("rx","ry")] %*% pc$rotation))
df[,c("rx","ry")] %*% pc$rotation
df[,c("rx","ry")]
pc$rotation
df[,c("rx","ry")] %*% pc$rotation
with(df, plot(df[,c("rx","ry")] %*% (pc$rotation)))
with(df, plot((df[,c("rx","ry")]) %*% (pc$rotation)))
with(df, plot(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation)))
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
postuR:::rotate.data(from = c(0.4124, 0.6288, 0.32986), to = c(0,0,1)) %>%
sample_n(3000)
head(df)
with(df, plot(ry~rx))
with(df, cor(ry,rx))
with(df, cor(ry,rx))
sd(df$rx)
sd(df$ry)
summary(df)
pc <- prcomp(df[,c("rx","ry")],
center = TRUE,
scale. = F)
with(df, plot(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation)))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
with(df, plot(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation)))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
with(df, plot(as.matrix(df[,c("rx","ry")])))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
mean(df$rx)
mean(df$ry)
pc <- prcomp(df[,c("rx","ry")],
center = F,
scale. = F)
with(df, plot(as.matrix(df[,c("rx","ry")])))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
with(df, points((pc$rotation) %*% as.matrix(df[,c("rx","ry")]) , col = "red"))
pc$rotation
with(df, points((pc$rotation) %*% t(as.matrix(df[,c("rx","ry")])) , col = "red"))
with(df, plot(as.matrix(df[,c("rx","ry")])))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
with(df, points((pc$rotation) %*% t(as.matrix(df[,c("rx","ry")])) , col = "blue"))
with(df, points(df[,c("rx","ry")]) %*% t(pc$rotation) , col = "blue"))
with(df, plot(as.matrix(df[,c("rx","ry")])))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% t(pc$rotation) , col = "blue"))
lines( sin(seq(0, 2*pi, length = 100)),cos(seq(0, 2*pi, length = 100)))
with(df, plot(as.matrix(df[,c("rx","ry")]), xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)))
lines( sin(seq(0, 2*pi, length = 100)),cos(seq(0, 2*pi, length = 100)))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% t(pc$rotation) , col = "blue"))
summary(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation))
summary(as.matrix(df[,c("rx","ry")]) %*% t(pc$rotation))
var(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation))
var(as.matrix(df[,c("rx","ry")]) %*% t(pc$rotation))
mean(df$rx)
mean(df$ry)
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
postuR:::rotate.data(from = c(0.4124, 0.6288, 0.32986), to = c(0,0,1))
mean(df$rx)
mean(df$ry)
library(postuR)
library(tidyverse)
data("sample.accel")
summary(sample.accel[1:(1440*60*1.57),])
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
postuR:::rotate.data(from = c(0.4124, 0.6288, 0.32986), to = c(0,0,1))
mean(df$rx)
mean(df$ry)
select(sample.accel[1:(1440*60*1.57),], x:z) %>% summary
head(df)
with(df, plot(ry~rx))
with(df, cor(ry,rx))
with(df, cor(ry,rx))
sd(df$rx)
sd(df$ry)
mean(df$rx)
mean(df$ry)
summary(df)
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
mutate(r = sqrt(x^2 + y^2 + z^2),
x = x/r, y = y/r, z = z/r) %>%
summary
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
mutate(r = sqrt(x^2 + y^2 + z^2),
x = x/r, y = y/r, z = z/r) %>%
postuR:::rotate.data(from = c(0.3963, 0.6064, 0.31876), to = c(0,0,1))
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
mutate(r = sqrt(x^2 + y^2 + z^2),
x = x/r, y = y/r, z = z/r) %>%
select(-r) %>%
postuR:::rotate.data(from = c(0.3963, 0.6064, 0.31876), to = c(0,0,1))
head(df)
summary(df)
library(postuR)
library(tidyverse)
data("sample.accel")
summary(sample.accel[1:(1440*60*1.57),])
# Mean   : 0.4124   Mean   : 0.6288   Mean   : 0.32986
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
mutate(r = sqrt(x^2 + y^2 + z^2),
x = x/r, y = y/r, z = z/r) %>%
select(-r) %>%
postuR:::rotate.data(from = c(0.3963, 0.6064, 0.31876), to = c(0,0,1))
summary(df)
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
mutate(r = sqrt(x^2 + y^2 + z^2),
x = x/r, y = y/r, z = z/r) %>%
summary
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
mutate(r = sqrt(x^2 + y^2 + z^2),
x = x/r, y = y/r, z = z/r) %>%
select(-r) %>%
postuR:::rotate.data(from = c(0.3963, 0.6064, 0.31876), to = c(0,0,1))
df
summary(df)
sqrt(sum(c(0.3963, 0.6064, 0.31876)^2))
df <-
select(sample.accel[1:(1440*60*1.57),], x:z) %>%
mutate(r = sqrt(x^2 + y^2 + z^2),
x = x/r, y = y/r, z = z/r) %>%
select(-r) %>%
postuR:::rotate.data(from = c(0.3963, 0.6064, 0.31876)/sqrt(sum(c(0.3963, 0.6064, 0.31876)^2)), to = c(0,0,1))
summary(df)
with(df, plot(ry~rx))
with(df, cor(ry,rx))
with(df, cor(ry,rx))
sd(df$rx)
sd(df$ry)
mean(df$rx)
mean(df$ry)
summary(df)
pc <- prcomp(df[,c("rx","ry")],
center = F,
scale. = F)
with(df, plot(as.matrix(df[,c("rx","ry")]), xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)))
lines( sin(seq(0, 2*pi, length = 100)),cos(seq(0, 2*pi, length = 100)))
with(df, points(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation), col = "red"))
var(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation))
var(as.matrix(df[,c("rx","ry")]) %*% t(pc$rotation))
var(as.matrix(df[,c("rx","ry")]) %*% (pc$rotation)) %>% diag
var(as.matrix(df[,c("rx","ry")]) %*% t(pc$rotation)) %>% diag
postuR::
calculate.removal.time
postuR::calculate.removal.time
