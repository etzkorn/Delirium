library(frailtypack); library(tidyverse)
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
save.date <- "20211213"
set.seed(121321)
par00 = c(betaR = 1, etaR = 10,
betaD = 1.85, etaD = 25,
betaD2 = 1.15, etaD2 = 10,
theta = 0.2, alpha1 = -0.12, alpha2 = -0.32,
trtR = -0.08, trtD = 0.07, trtD2 = 0.08)
print(par00)
data <-
simulate.competing.data(n = 1500, truncate = 28, par0 = par00)
data <-
simulate.competing.data(n = 1500, truncate = 28, par0 = par00)
data %>%
group_by(id) %>%
summarise(del = any(event==1),
no.del = sum(event==1),
death = any(terminal1==1),
discharge = any(terminal2==1)) %>%
summarise(`Delirium Prevalence` = mean(del),
`Max No. Delirium Events` = max(no.del),
`Proportion Died` = mean(death),
`Proportion Discharged` = mean(discharge),
`Delirium Prevalence among Mortalities` = mean(death*del)/mean(death),
`Delirium Prevalence among Discharges` = mean((discharge*del))/mean(discharge)) %>%
t
mod0 <-
multivPenal(
formula = Surv(t0, t, event)~cluster(id)+trt+terminal(terminal1)+terminal2(terminal2),
formula.terminalEvent=~trt,
formula.terminalEvent2=~trt,
data=data,
jointGeneral = F,
initialize = T,
save.progress = T,
hazard = "Weibull",
gapTimes=T,
maxit = 350)
mod0$summary.table
nsim = 10
par0 = rep(each = nsim, list(par00))
data0 <-
map(par0,
~simulate.competing.data(n = 1200,truncate = 2,par0 = .))
mod.joint <- list()
# Fit models
for(i in 1:length(par0)){
mod.joint[[i]] <-
multivPenal(formula = Surv(t0, t, event) ~ trt + cluster(id) +
terminal(terminal1) + terminal2(terminal2),
formula.terminalEvent = ~trt,
formula.terminalEvent2= ~trt,
jointGeneral = F,
save.progress = T,
data = data0[[i]],
gapTimes=T,
hazard = "Weibull",
maxit = 100,
initialize = T)
cat("Model ", i, "complete.\n")
save(data0, mod.joint,
file = paste0("../package_test_output/CompetingJointModels_",save.date,".rdata"))
}
truth =
tibble(Parameter = mod.joint[[1]]$summary.table$Parameter,
truth = par00)
results <-
tibble(data = 1:(nsim),
est = map(mod.joint, ~.$summary.table),
error = map(mod.joint, ~.$critCV[2]) %>% unlist %>%
factor(labels = c("None","Maxit","Calculation"),levels = c(1,2,4)),
anyerror = map(mod.joint, ~.$critCV[2]!=1)%>% unlist,
error2 = map(mod.joint, ~.$critCV[2] ==2) %>% unlist,
error4 = map(mod.joint, ~.$critCV[2] ==4) %>% unlist) %>%
unnest(c(est))
# Plot Results
results %>%
ggplot()+
geom_point(aes(y = data, x = Estimate, color = error)) +
facet_wrap("Parameter", scales = "free") +
geom_vline(data = truth, aes(xintercept = truth), color = "red") +
scale_color_manual(values = c("black", "green", "red"))+
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
truth =
tibble(Parameter = mod.joint[[1]]$summary.table$Parameter,
truth = par00)
results2 <-
tibble(data = 1:(nsim),
par1 = map(mod.joint, ~.$initialization$summary.table1$Parameter),
est1 = map(mod.joint, ~.$initialization$summary.table1$Estimate),
par2 = map(mod.joint, ~.$initialization$summary.table2$Parameter),
est2 = map(mod.joint, ~.$initialization$summary.table2$Estimate)) %>%
unnest(c(par1, est1, par2, est2))
# Plot Results
results2 %>%
filter(par1 %in% c("Shape, Recurrent","Scale, Recurrent", "Sigma, Terminal", "Beta1")) %>%
ggplot()+
geom_point(aes(y = data, x = est1)) +
facet_wrap("par1", scales = "free") +
geom_vline(data = tibble(truth = par00[c("betaR","etaR","theta","trtR")],
par1 = c("Shape, Recurrent","Scale, Recurrent", "Sigma, Terminal", "Beta1")),
aes(xintercept = truth), color = "red") +
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
# Plot Results
results2 %>%
filter(par1 %in% c("Shape, Recurrent","Scale, Recurrent", "Sigma, Terminal", "Recurrent: trt")) %>%
ggplot()+
geom_point(aes(y = data, x = est1)) +
facet_wrap("par1", scales = "free") +
geom_vline(data = tibble(truth = par00[c("betaR","etaR","theta","trtR")],
par1 = c("Shape, Recurrent","Scale, Recurrent", "Sigma, Terminal", "Beta1")),
aes(xintercept = truth), color = "red") +
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
# Plot Results
results2 %>%
filter(par1 %in% c("Shape, Recurrent","Scale, Recurrent", "Sigma, Terminal", "Recurrent: trt")) %>%
ggplot()+
geom_point(aes(y = data, x = est1)) +
facet_wrap("par1", scales = "free") +
geom_vline(data = tibble(truth = par00[c("betaR","etaR","theta","trtR")],
par1 = c("Shape, Recurrent","Scale, Recurrent",
"Sigma, Terminal", "Recurrent: trt")),
aes(xintercept = truth), color = "red") +
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
# Plot Results
results2 %>%
filter(par1 %in% c("Shape, Recurrent","Scale, Recurrent", "Sigma", "Recurrent: trt")) %>%
ggplot()+
geom_point(aes(y = data, x = est1)) +
facet_wrap("par1", scales = "free") +
geom_vline(data = tibble(truth = par00[c("betaR","etaR","theta","trtR")],
par1 = c("Shape, Recurrent","Scale, Recurrent",
"Sigma", "Recurrent: trt")),
aes(xintercept = truth), color = "red") +
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
# Plot Results
results2 %>%
filter(par1 %in% c("Shape, Recurrent","Scale, Recurrent", "Sigma", "Recurrent: trt")) %>%
ggplot()+
geom_point(aes(y = data, x = est1)) +
facet_wrap("par1", scales = "free") +
geom_vline(data = tibble(truth = par00[c("betaR","etaR","theta","trtR")],
par1 = c("Shape, Recurrent","Scale, Recurrent",
"Sigma", "Recurrent: trt")),
aes(xintercept = truth), color = "red") +
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
results %>%
filter(grepl("Alpha", Parameter)) %>%
dplyr::select(data, Parameter, Raw) %>%
pivot_wider(id_cols = data, names_from = "Parameter", values_from = "Raw") %>%
ggplot()+
geom_point(aes(x = `Alpha, Terminal1`, y = `Alpha, Terminal2`))
# Plot Results
results2 %>%
filter(par1 %in% c("Shape, Recurrent","Scale, Recurrent", "Sigma", "Recurrent: trt")) %>%
ggplot()+
geom_point(aes(y = data, x = est1)) +
geom_point(aes(y = data, x = est2), color="blue") +
facet_wrap("par1", scales = "free") +
geom_vline(data = tibble(truth = par00[c("betaR","etaR","theta","trtR")],
par1 = c("Shape, Recurrent","Scale, Recurrent",
"Sigma", "Recurrent: trt")),
aes(xintercept = truth), color = "red") +
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
# Plot Results
results2 %>%
filter(par1 %in% c("Shape, Recurrent","Scale, Recurrent", "Sigma", "Recurrent: trt")) %>%
ggplot()+
geom_point(aes(y = data, x = est1)) +
geom_point(aes(y = data, x = est2), color="blue", shape = 1) +
facet_wrap("par1", scales = "free") +
geom_vline(data = tibble(truth = par00[c("betaR","etaR","theta","trtR")],
par1 = c("Shape, Recurrent","Scale, Recurrent",
"Sigma", "Recurrent: trt")),
aes(xintercept = truth), color = "red") +
theme_bw()+
labs(title = paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")"))
tab_start <-
results %>%mutate(Truth = rep(truth$truth,nsim)) %>%
group_by(Parameter) %>%
summarise(Truth = Truth[1],
Mean = mean(Estimate[!anyerror], trim = 0.005),
SD = mean((Estimate[!anyerror]-Mean)^2, na.rm=T, trim = 0.005)^.5,
Est.SD = mean(Estimate.SE[!anyerror], na.rm=T, trim = 0.005), .groups = "drop"
) %>%
pivot_longer(cols = Mean:Est.SD) %>%
mutate(value = round(value, 3)) %>%
pivot_wider(names_from = c(name), values_from = value)
gt(tab_start, rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md("**Joint Model Frailty Pack Fits (R = 1,000, n = 1,200)**"))%>%
cols_label(
Truth = html("True Value"),
Mean = html("Avg. Estimate"),
SD = html("SE"),
Est.SD = html("Avg. Est. SE")
)
## Errors
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(frailtypack); library(tidyverse); library(gt)
source("../delirium_package/R/competing_simulate_data.R")
source("../delirium_package/R/random_weibull.R")
save.date <- "20211213"
set.seed(121321)
results
results2 <-
tibble(data = 1:(nsim),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate))) %>%
unnest(c(Parameter, Estimate))
c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate))
c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter))
results2 <-
tibble(data = rep(1:(nsim),2),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate))) %>%
unnest(c(Parameter, Estimate))
results
results2 <-
tibble(data = rep(1:(nsim),2),
truth = rep(par00, 2*nsim),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate))) %>%
unnest(c(Parameter, Estimate))
par00
results2 <-
tibble(data = rep(1:(nsim),2),
truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim)),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate))) %>%
unnest(c(Parameter, Estimate))
par00[c(1:4,7:8,10:11)]
results2 <-
tibble(data = rep(1:(nsim),2),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate))) %>%
unnest(c(Parameter, Estimate)) %>%
mutate(truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim)))
results2
results2 <-
tibble(data = rep(1:(nsim),2),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate))) %>%
unnest(c(Parameter, Estimate)) %>%
mutate(Truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim)))
truth =
tibble(Parameter = mod.joint[[1]]$summary.table$Parameter,
truth = par00)
tab_start <-
results %>% select(Parameter, Estimate) %>%
mutate(Truth = rep(truth$truth,nsim)) %>%
group_by(Parameter) %>%
summarise(Truth = Truth[1],
Mean = mean(Estimate[!anyerror], trim = 0.005),
SD = mean((Estimate[!anyerror]-Mean)^2, na.rm=T, trim = 0.005)^.5,
Est.SD = mean(Estimate.SE[!anyerror], na.rm=T, trim = 0.005), .groups = "drop"
) %>%
pivot_longer(cols = Mean:Est.SD) %>%
mutate(value = round(value, 3)) %>%
pivot_wider(names_from = c(name), values_from = value)
mod.joint[[1]]$initialization$joint1$istop
results2 <-
tibble(data = rep(1:(nsim),2),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate)),
Error = c(map(mod.joint, ~.$initialization$hoint1$istop),
map(mod.joint, ~.$initialization$hoint1$istop))) %>%
unnest(c(Parameter, Estimate, Error)) %>%
mutate(Truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim)))
map(mod.joint, ~.$initialization$hoint1$istop)
results2 <-
tibble(data = rep(1:(nsim),2),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate)),
Error = c(map(mod.joint, ~.$initialization$joint1$istop),
map(mod.joint, ~.$initialization$joint1$istop))) %>%
unnest(c(Parameter, Estimate, Error)) %>%
mutate(Truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim)))
tab_start
results2
results2
results2 <-
tibble(data = rep(1:(nsim), 2), model = rep(1:2, each = nsim),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate)),
Error = c(map(mod.joint, ~.$initialization$joint1$istop),
map(mod.joint, ~.$initialization$joint1$istop))) %>%
unnest(c(Parameter, Estimate, Error)) %>%
mutate(Truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim))) %>%
group_by()
results2 <-
tibble(data = rep(1:(nsim), 2), model = rep(1:2, each = nsim),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate)),
Error = c(map(mod.joint, ~.$initialization$joint1$istop),
map(mod.joint, ~.$initialization$joint1$istop))) %>%
unnest(c(Parameter, Estimate, Error)) %>%
mutate(Truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim)),
Error = Error!=1) %>%
group_by(model, Parameter)  %>%
summarise(Truth = Truth[1],
Mean = mean(Estimate[!Error]),
SD = mean((Estimate[!Error]-Mean)^2, na.rm=T)^.5, .groups = "drop"
)
results2
results2 <-
tibble(data = rep(1:(nsim), 2), model = rep(1:2, each = nsim),
Parameter = c(map(mod.joint, ~.$initialization$summary.table1$Parameter),
map(mod.joint, ~.$initialization$summary.table2$Parameter)),
Estimate = c(map(mod.joint, ~.$initialization$summary.table1$Estimate),
map(mod.joint, ~.$initialization$summary.table2$Estimate)),
Error = c(map(mod.joint, ~.$initialization$joint1$istop),
map(mod.joint, ~.$initialization$joint1$istop))) %>%
unnest(c(Parameter, Estimate, Error)) %>%
mutate(Truth = c(rep(par00[c(1:4,7:8,10:11)], nsim), rep(par00[c(1:2,5:7,9:10,12)], nsim)),
Error = Error!=1) %>%
group_by(model, Parameter)  %>%
summarise(Truth = Truth[1],
Mean = mean(Estimate[!Error]),
SD = mean((Estimate[!Error]-Mean)^2, na.rm=T)^.5, .groups = "drop"
) %>%
pivot_wider(id_cols = Parameter, values_from = c(Truth, Mean, SD), names_from = model)
results2
tab_start %>%
left_join(results2, by = "Parameter")
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE"),
Est.SD = html("Avg. Est. SE")
)
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md("none"))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE"),
Est.SD = html("Avg. Est. SE")
)
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE")
)
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("**Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")**")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE")
)
mod0$summary.table %>% gt()
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("**Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")**")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE")
) %>%
fmt_number(c(4,6,8),pattern = "({x})")
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("**Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")**")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE")
) %>%
fmt_number(c(4,6,8),pattern = "({x})")%>%
fmt_number(c(3,5,7))
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("**Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")**")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE")
) %>%
fmt_number(c(4,6,8),pattern = "({x})")%>%
fmt_number(c(3,5,7)) %>%
fmt_missing(columns = 1:8, missing_text = "")
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("**Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")**")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE")
) %>%
fmt_number(c(4,6,8),pattern = "({x})")%>%
fmt_number(c(3,5,7)) %>%
fmt_missing(columns = 1:8, missing_text = "") %>%
cols_align(columns = c("4,6,8"), align = c("left"))
tab_start %>%
left_join(results2, by = "Parameter") %>%
select(Parameter, Truth, Mean, SD, Mean_1, SD_1, Mean_2, SD_2) %>%
gt(rowname_col = "Parameter")%>%
tab_stubhead(label = "Parameter")%>%
tab_header(
title = md(paste0("**Competing Joint Model Simulation Results(R =",length(par00),", n = ", length(unique(data0[[1]]$id)),")**")))%>%
cols_label(
Mean = html("Competing Estimate"),
Mean_1 = html("Death Estimate"),
Mean_2 = html("Discharge Estimate"),
SD = html("SE"),
SD_1 = html("SE"),
SD_2 = html("SE")
) %>%
fmt_number(c(4,6,8),pattern = "({x})")%>%
fmt_number(c(3,5,7)) %>%
fmt_missing(columns = 1:8, missing_text = "") %>%
cols_align(columns = c(4,6,8), align = c("left"))
map(mod.joint, ~.$initialization$joint1$istop)
map(mod.joint, ~.$initialization$joint1$istop) %>% unlist %>% table
map(mod.joint, ~.$initialization$joint2$istop) %>% unlist %>% table
